"""autogenerated by genpy from SubMotorController/MotorMessage.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MotorMessage(genpy.Message):
  _md5sum = "eb586c06729a6d7d1e877d5edd5c857e"
  _type = "SubMotorController/MotorMessage"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 mask

int16 Left
int16 Right

int16 FrontDepth
int16 RearDepth

int16 FrontTurn
int16 RearTurn

"""
  __slots__ = ['mask','Left','Right','FrontDepth','RearDepth','FrontTurn','RearTurn']
  _slot_types = ['uint8','int16','int16','int16','int16','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mask,Left,Right,FrontDepth,RearDepth,FrontTurn,RearTurn

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotorMessage, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.mask is None:
        self.mask = 0
      if self.Left is None:
        self.Left = 0
      if self.Right is None:
        self.Right = 0
      if self.FrontDepth is None:
        self.FrontDepth = 0
      if self.RearDepth is None:
        self.RearDepth = 0
      if self.FrontTurn is None:
        self.FrontTurn = 0
      if self.RearTurn is None:
        self.RearTurn = 0
    else:
      self.mask = 0
      self.Left = 0
      self.Right = 0
      self.FrontDepth = 0
      self.RearDepth = 0
      self.FrontTurn = 0
      self.RearTurn = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_B6h.pack(_x.mask, _x.Left, _x.Right, _x.FrontDepth, _x.RearDepth, _x.FrontTurn, _x.RearTurn))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.mask, _x.Left, _x.Right, _x.FrontDepth, _x.RearDepth, _x.FrontTurn, _x.RearTurn,) = _struct_B6h.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_B6h.pack(_x.mask, _x.Left, _x.Right, _x.FrontDepth, _x.RearDepth, _x.FrontTurn, _x.RearTurn))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.mask, _x.Left, _x.Right, _x.FrontDepth, _x.RearDepth, _x.FrontTurn, _x.RearTurn,) = _struct_B6h.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B6h = struct.Struct("<B6h")
