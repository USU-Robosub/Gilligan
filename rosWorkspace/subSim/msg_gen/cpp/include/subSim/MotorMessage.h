/* Auto-generated by genmsg_cpp for file /home/daniel/sub12/rosWorkspace/subSim/msg/MotorMessage.msg */
#ifndef SUBSIM_MESSAGE_MOTORMESSAGE_H
#define SUBSIM_MESSAGE_MOTORMESSAGE_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"


namespace subSim
{
template <class ContainerAllocator>
struct MotorMessage_ : public ros::Message
{
  typedef MotorMessage_<ContainerAllocator> Type;

  MotorMessage_()
  : mask(0)
  , Left(0)
  , Right(0)
  , FrontDepth(0)
  , RearDepth(0)
  , FrontTurn(0)
  , RearTurn(0)
  {
  }

  MotorMessage_(const ContainerAllocator& _alloc)
  : mask(0)
  , Left(0)
  , Right(0)
  , FrontDepth(0)
  , RearDepth(0)
  , FrontTurn(0)
  , RearTurn(0)
  {
  }

  typedef uint8_t _mask_type;
  uint8_t mask;

  typedef int16_t _Left_type;
  int16_t Left;

  typedef int16_t _Right_type;
  int16_t Right;

  typedef int16_t _FrontDepth_type;
  int16_t FrontDepth;

  typedef int16_t _RearDepth_type;
  int16_t RearDepth;

  typedef int16_t _FrontTurn_type;
  int16_t FrontTurn;

  typedef int16_t _RearTurn_type;
  int16_t RearTurn;


private:
  static const char* __s_getDataType_() { return "subSim/MotorMessage"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "eb586c06729a6d7d1e877d5edd5c857e"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "uint8 mask\n\
\n\
int16 Left\n\
int16 Right\n\
\n\
int16 FrontDepth\n\
int16 RearDepth\n\
\n\
int16 FrontTurn\n\
int16 RearTurn\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, mask);
    ros::serialization::serialize(stream, Left);
    ros::serialization::serialize(stream, Right);
    ros::serialization::serialize(stream, FrontDepth);
    ros::serialization::serialize(stream, RearDepth);
    ros::serialization::serialize(stream, FrontTurn);
    ros::serialization::serialize(stream, RearTurn);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, mask);
    ros::serialization::deserialize(stream, Left);
    ros::serialization::deserialize(stream, Right);
    ros::serialization::deserialize(stream, FrontDepth);
    ros::serialization::deserialize(stream, RearDepth);
    ros::serialization::deserialize(stream, FrontTurn);
    ros::serialization::deserialize(stream, RearTurn);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(mask);
    size += ros::serialization::serializationLength(Left);
    size += ros::serialization::serializationLength(Right);
    size += ros::serialization::serializationLength(FrontDepth);
    size += ros::serialization::serializationLength(RearDepth);
    size += ros::serialization::serializationLength(FrontTurn);
    size += ros::serialization::serializationLength(RearTurn);
    return size;
  }

  typedef boost::shared_ptr< ::subSim::MotorMessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::subSim::MotorMessage_<ContainerAllocator>  const> ConstPtr;
}; // struct MotorMessage
typedef  ::subSim::MotorMessage_<std::allocator<void> > MotorMessage;

typedef boost::shared_ptr< ::subSim::MotorMessage> MotorMessagePtr;
typedef boost::shared_ptr< ::subSim::MotorMessage const> MotorMessageConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::subSim::MotorMessage_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::subSim::MotorMessage_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace subSim

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::subSim::MotorMessage_<ContainerAllocator> > {
  static const char* value() 
  {
    return "eb586c06729a6d7d1e877d5edd5c857e";
  }

  static const char* value(const  ::subSim::MotorMessage_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xeb586c06729a6d7dULL;
  static const uint64_t static_value2 = 0x1e877d5edd5c857eULL;
};

template<class ContainerAllocator>
struct DataType< ::subSim::MotorMessage_<ContainerAllocator> > {
  static const char* value() 
  {
    return "subSim/MotorMessage";
  }

  static const char* value(const  ::subSim::MotorMessage_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::subSim::MotorMessage_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 mask\n\
\n\
int16 Left\n\
int16 Right\n\
\n\
int16 FrontDepth\n\
int16 RearDepth\n\
\n\
int16 FrontTurn\n\
int16 RearTurn\n\
\n\
";
  }

  static const char* value(const  ::subSim::MotorMessage_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::subSim::MotorMessage_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::subSim::MotorMessage_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.mask);
    stream.next(m.Left);
    stream.next(m.Right);
    stream.next(m.FrontDepth);
    stream.next(m.RearDepth);
    stream.next(m.FrontTurn);
    stream.next(m.RearTurn);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MotorMessage_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::subSim::MotorMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::subSim::MotorMessage_<ContainerAllocator> & v) 
  {
    s << indent << "mask: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mask);
    s << indent << "Left: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Left);
    s << indent << "Right: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Right);
    s << indent << "FrontDepth: ";
    Printer<int16_t>::stream(s, indent + "  ", v.FrontDepth);
    s << indent << "RearDepth: ";
    Printer<int16_t>::stream(s, indent + "  ", v.RearDepth);
    s << indent << "FrontTurn: ";
    Printer<int16_t>::stream(s, indent + "  ", v.FrontTurn);
    s << indent << "RearTurn: ";
    Printer<int16_t>::stream(s, indent + "  ", v.RearTurn);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SUBSIM_MESSAGE_MOTORMESSAGE_H

