/* Auto-generated by genmsg_cpp for file /home/daniel/sub12/rosWorkspace/subSim/msg/mixer.msg */
#ifndef SUBSIM_MESSAGE_MIXER_H
#define SUBSIM_MESSAGE_MIXER_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"


namespace subSim
{
template <class ContainerAllocator>
struct mixer_ : public ros::Message
{
  typedef mixer_<ContainerAllocator> Type;

  mixer_()
  : value(0.0)
  , confidence(0.0)
  {
  }

  mixer_(const ContainerAllocator& _alloc)
  : value(0.0)
  , confidence(0.0)
  {
  }

  typedef float _value_type;
  float value;

  typedef float _confidence_type;
  float confidence;


private:
  static const char* __s_getDataType_() { return "subSim/mixer"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "ba840d81d8a0efbe22902b684b543995"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float32 value\n\
float32 confidence\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, value);
    ros::serialization::serialize(stream, confidence);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, value);
    ros::serialization::deserialize(stream, confidence);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(value);
    size += ros::serialization::serializationLength(confidence);
    return size;
  }

  typedef boost::shared_ptr< ::subSim::mixer_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::subSim::mixer_<ContainerAllocator>  const> ConstPtr;
}; // struct mixer
typedef  ::subSim::mixer_<std::allocator<void> > mixer;

typedef boost::shared_ptr< ::subSim::mixer> mixerPtr;
typedef boost::shared_ptr< ::subSim::mixer const> mixerConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::subSim::mixer_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::subSim::mixer_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace subSim

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::subSim::mixer_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ba840d81d8a0efbe22902b684b543995";
  }

  static const char* value(const  ::subSim::mixer_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xba840d81d8a0efbeULL;
  static const uint64_t static_value2 = 0x22902b684b543995ULL;
};

template<class ContainerAllocator>
struct DataType< ::subSim::mixer_<ContainerAllocator> > {
  static const char* value() 
  {
    return "subSim/mixer";
  }

  static const char* value(const  ::subSim::mixer_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::subSim::mixer_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 value\n\
float32 confidence\n\
\n\
";
  }

  static const char* value(const  ::subSim::mixer_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::subSim::mixer_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::subSim::mixer_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.value);
    stream.next(m.confidence);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct mixer_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::subSim::mixer_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::subSim::mixer_<ContainerAllocator> & v) 
  {
    s << indent << "value: ";
    Printer<float>::stream(s, indent + "  ", v.value);
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SUBSIM_MESSAGE_MIXER_H

