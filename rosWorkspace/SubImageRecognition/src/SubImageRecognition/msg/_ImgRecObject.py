"""autogenerated by genmsg_py from ImgRecObject.msg. Do not edit."""
import roslib.message
import struct

import roslib.rostime

class ImgRecObject(roslib.message.Message):
  _md5sum = "a8243451f739dcfc8a2be0d3a2d4dea6"
  _type = "SubImageRecognition/ImgRecObject"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """time stamp
string name
int16 center_x
int16 center_y
float32 rotation
uint16 height
uint16 width
float32 confidence

"""
  __slots__ = ['stamp','name','center_x','center_y','rotation','height','width','confidence']
  _slot_types = ['time','string','int16','int16','float32','uint16','uint16','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       stamp,name,center_x,center_y,rotation,height,width,confidence
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(ImgRecObject, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.stamp is None:
        self.stamp = roslib.rostime.Time()
      if self.name is None:
        self.name = ''
      if self.center_x is None:
        self.center_x = 0
      if self.center_y is None:
        self.center_y = 0
      if self.rotation is None:
        self.rotation = 0.
      if self.height is None:
        self.height = 0
      if self.width is None:
        self.width = 0
      if self.confidence is None:
        self.confidence = 0.
    else:
      self.stamp = roslib.rostime.Time()
      self.name = ''
      self.center_x = 0
      self.center_y = 0
      self.rotation = 0.
      self.height = 0
      self.width = 0
      self.confidence = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_2I.pack(_x.stamp.secs, _x.stamp.nsecs))
      _x = self.name
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2hf2Hf.pack(_x.center_x, _x.center_y, _x.rotation, _x.height, _x.width, _x.confidence))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.stamp is None:
        self.stamp = roslib.rostime.Time()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.stamp.secs, _x.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.name = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.center_x, _x.center_y, _x.rotation, _x.height, _x.width, _x.confidence,) = _struct_2hf2Hf.unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_2I.pack(_x.stamp.secs, _x.stamp.nsecs))
      _x = self.name
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2hf2Hf.pack(_x.center_x, _x.center_y, _x.rotation, _x.height, _x.width, _x.confidence))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.stamp is None:
        self.stamp = roslib.rostime.Time()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.stamp.secs, _x.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.name = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.center_x, _x.center_y, _x.rotation, _x.height, _x.width, _x.confidence,) = _struct_2hf2Hf.unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_2I = struct.Struct("<2I")
_struct_2hf2Hf = struct.Struct("<2hf2Hf")
