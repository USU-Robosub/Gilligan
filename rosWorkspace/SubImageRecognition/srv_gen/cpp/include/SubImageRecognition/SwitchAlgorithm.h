/* Auto-generated by genmsg_cpp for file /home/bryhansen/ros_workspace/robosub/rosWorkspace/SubImageRecognition/srv/SwitchAlgorithm.srv */
#ifndef SUBIMAGERECOGNITION_SERVICE_SWITCHALGORITHM_H
#define SUBIMAGERECOGNITION_SERVICE_SWITCHALGORITHM_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ros/service_traits.h"




namespace SubImageRecognition
{
template <class ContainerAllocator>
struct SwitchAlgorithmRequest_ : public ros::Message
{
  typedef SwitchAlgorithmRequest_<ContainerAllocator> Type;

  SwitchAlgorithmRequest_()
  : algorithm()
  , enabled(0)
  {
  }

  SwitchAlgorithmRequest_(const ContainerAllocator& _alloc)
  : algorithm(_alloc)
  , enabled(0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _algorithm_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  algorithm;

  typedef int8_t _enabled_type;
  int8_t enabled;


private:
  static const char* __s_getDataType_() { return "SubImageRecognition/SwitchAlgorithmRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "04420871f87780b687e9f81baad10458"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "5d33cd0d6349093380d55a2733f4e514"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "string algorithm\n\
int8 enabled\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, algorithm);
    ros::serialization::serialize(stream, enabled);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, algorithm);
    ros::serialization::deserialize(stream, enabled);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(algorithm);
    size += ros::serialization::serializationLength(enabled);
    return size;
  }

  typedef boost::shared_ptr< ::SubImageRecognition::SwitchAlgorithmRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::SubImageRecognition::SwitchAlgorithmRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct SwitchAlgorithmRequest
typedef  ::SubImageRecognition::SwitchAlgorithmRequest_<std::allocator<void> > SwitchAlgorithmRequest;

typedef boost::shared_ptr< ::SubImageRecognition::SwitchAlgorithmRequest> SwitchAlgorithmRequestPtr;
typedef boost::shared_ptr< ::SubImageRecognition::SwitchAlgorithmRequest const> SwitchAlgorithmRequestConstPtr;


template <class ContainerAllocator>
struct SwitchAlgorithmResponse_ : public ros::Message
{
  typedef SwitchAlgorithmResponse_<ContainerAllocator> Type;

  SwitchAlgorithmResponse_()
  : result(0)
  {
  }

  SwitchAlgorithmResponse_(const ContainerAllocator& _alloc)
  : result(0)
  {
  }

  typedef int8_t _result_type;
  int8_t result;


private:
  static const char* __s_getDataType_() { return "SubImageRecognition/SwitchAlgorithmResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "4414c67819626a1b8e0f043a9a0d6c9a"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "5d33cd0d6349093380d55a2733f4e514"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int8 result\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, result);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, result);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(result);
    return size;
  }

  typedef boost::shared_ptr< ::SubImageRecognition::SwitchAlgorithmResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::SubImageRecognition::SwitchAlgorithmResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct SwitchAlgorithmResponse
typedef  ::SubImageRecognition::SwitchAlgorithmResponse_<std::allocator<void> > SwitchAlgorithmResponse;

typedef boost::shared_ptr< ::SubImageRecognition::SwitchAlgorithmResponse> SwitchAlgorithmResponsePtr;
typedef boost::shared_ptr< ::SubImageRecognition::SwitchAlgorithmResponse const> SwitchAlgorithmResponseConstPtr;

struct SwitchAlgorithm
{

typedef SwitchAlgorithmRequest Request;
typedef SwitchAlgorithmResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SwitchAlgorithm
} // namespace SubImageRecognition

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::SubImageRecognition::SwitchAlgorithmRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "04420871f87780b687e9f81baad10458";
  }

  static const char* value(const  ::SubImageRecognition::SwitchAlgorithmRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x04420871f87780b6ULL;
  static const uint64_t static_value2 = 0x87e9f81baad10458ULL;
};

template<class ContainerAllocator>
struct DataType< ::SubImageRecognition::SwitchAlgorithmRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "SubImageRecognition/SwitchAlgorithmRequest";
  }

  static const char* value(const  ::SubImageRecognition::SwitchAlgorithmRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::SubImageRecognition::SwitchAlgorithmRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string algorithm\n\
int8 enabled\n\
\n\
";
  }

  static const char* value(const  ::SubImageRecognition::SwitchAlgorithmRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::SubImageRecognition::SwitchAlgorithmResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4414c67819626a1b8e0f043a9a0d6c9a";
  }

  static const char* value(const  ::SubImageRecognition::SwitchAlgorithmResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4414c67819626a1bULL;
  static const uint64_t static_value2 = 0x8e0f043a9a0d6c9aULL;
};

template<class ContainerAllocator>
struct DataType< ::SubImageRecognition::SwitchAlgorithmResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "SubImageRecognition/SwitchAlgorithmResponse";
  }

  static const char* value(const  ::SubImageRecognition::SwitchAlgorithmResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::SubImageRecognition::SwitchAlgorithmResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 result\n\
\n\
\n\
";
  }

  static const char* value(const  ::SubImageRecognition::SwitchAlgorithmResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::SubImageRecognition::SwitchAlgorithmResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::SubImageRecognition::SwitchAlgorithmRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.algorithm);
    stream.next(m.enabled);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SwitchAlgorithmRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::SubImageRecognition::SwitchAlgorithmResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.result);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SwitchAlgorithmResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<SubImageRecognition::SwitchAlgorithm> {
  static const char* value() 
  {
    return "5d33cd0d6349093380d55a2733f4e514";
  }

  static const char* value(const SubImageRecognition::SwitchAlgorithm&) { return value(); } 
};

template<>
struct DataType<SubImageRecognition::SwitchAlgorithm> {
  static const char* value() 
  {
    return "SubImageRecognition/SwitchAlgorithm";
  }

  static const char* value(const SubImageRecognition::SwitchAlgorithm&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<SubImageRecognition::SwitchAlgorithmRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5d33cd0d6349093380d55a2733f4e514";
  }

  static const char* value(const SubImageRecognition::SwitchAlgorithmRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<SubImageRecognition::SwitchAlgorithmRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "SubImageRecognition/SwitchAlgorithm";
  }

  static const char* value(const SubImageRecognition::SwitchAlgorithmRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<SubImageRecognition::SwitchAlgorithmResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5d33cd0d6349093380d55a2733f4e514";
  }

  static const char* value(const SubImageRecognition::SwitchAlgorithmResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<SubImageRecognition::SwitchAlgorithmResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "SubImageRecognition/SwitchAlgorithm";
  }

  static const char* value(const SubImageRecognition::SwitchAlgorithmResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // SUBIMAGERECOGNITION_SERVICE_SWITCHALGORITHM_H

