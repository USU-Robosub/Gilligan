/* Auto-generated by genmsg_cpp for file /opt/robosub/rosWorkspace/SubImageRecognition/srv/ListAlgorithms.srv */
#ifndef SUBIMAGERECOGNITION_SERVICE_LISTALGORITHMS_H
#define SUBIMAGERECOGNITION_SERVICE_LISTALGORITHMS_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ros/service_traits.h"




namespace SubImageRecognition
{
template <class ContainerAllocator>
struct ListAlgorithmsRequest_ : public ros::Message
{
  typedef ListAlgorithmsRequest_<ContainerAllocator> Type;

  ListAlgorithmsRequest_()
  {
  }

  ListAlgorithmsRequest_(const ContainerAllocator& _alloc)
  {
  }


private:
  static const char* __s_getDataType_() { return "SubImageRecognition/ListAlgorithmsRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "d41d8cd98f00b204e9800998ecf8427e"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "5c271c164803b5cf2105bc913a23f17a"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    return size;
  }

  typedef boost::shared_ptr< ::SubImageRecognition::ListAlgorithmsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::SubImageRecognition::ListAlgorithmsRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct ListAlgorithmsRequest
typedef  ::SubImageRecognition::ListAlgorithmsRequest_<std::allocator<void> > ListAlgorithmsRequest;

typedef boost::shared_ptr< ::SubImageRecognition::ListAlgorithmsRequest> ListAlgorithmsRequestPtr;
typedef boost::shared_ptr< ::SubImageRecognition::ListAlgorithmsRequest const> ListAlgorithmsRequestConstPtr;


template <class ContainerAllocator>
struct ListAlgorithmsResponse_ : public ros::Message
{
  typedef ListAlgorithmsResponse_<ContainerAllocator> Type;

  ListAlgorithmsResponse_()
  : algorithms()
  {
  }

  ListAlgorithmsResponse_(const ContainerAllocator& _alloc)
  : algorithms(_alloc)
  {
  }

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _algorithms_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  algorithms;


  ROS_DEPRECATED uint32_t get_algorithms_size() const { return (uint32_t)algorithms.size(); }
  ROS_DEPRECATED void set_algorithms_size(uint32_t size) { algorithms.resize((size_t)size); }
  ROS_DEPRECATED void get_algorithms_vec(std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other > & vec) const { vec = this->algorithms; }
  ROS_DEPRECATED void set_algorithms_vec(const std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other > & vec) { this->algorithms = vec; }
private:
  static const char* __s_getDataType_() { return "SubImageRecognition/ListAlgorithmsResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "5c271c164803b5cf2105bc913a23f17a"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "5c271c164803b5cf2105bc913a23f17a"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "string[] algorithms\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, algorithms);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, algorithms);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(algorithms);
    return size;
  }

  typedef boost::shared_ptr< ::SubImageRecognition::ListAlgorithmsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::SubImageRecognition::ListAlgorithmsResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct ListAlgorithmsResponse
typedef  ::SubImageRecognition::ListAlgorithmsResponse_<std::allocator<void> > ListAlgorithmsResponse;

typedef boost::shared_ptr< ::SubImageRecognition::ListAlgorithmsResponse> ListAlgorithmsResponsePtr;
typedef boost::shared_ptr< ::SubImageRecognition::ListAlgorithmsResponse const> ListAlgorithmsResponseConstPtr;

struct ListAlgorithms
{

typedef ListAlgorithmsRequest Request;
typedef ListAlgorithmsResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct ListAlgorithms
} // namespace SubImageRecognition

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::SubImageRecognition::ListAlgorithmsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::SubImageRecognition::ListAlgorithmsRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::SubImageRecognition::ListAlgorithmsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "SubImageRecognition/ListAlgorithmsRequest";
  }

  static const char* value(const  ::SubImageRecognition::ListAlgorithmsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::SubImageRecognition::ListAlgorithmsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::SubImageRecognition::ListAlgorithmsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::SubImageRecognition::ListAlgorithmsRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::SubImageRecognition::ListAlgorithmsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5c271c164803b5cf2105bc913a23f17a";
  }

  static const char* value(const  ::SubImageRecognition::ListAlgorithmsResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x5c271c164803b5cfULL;
  static const uint64_t static_value2 = 0x2105bc913a23f17aULL;
};

template<class ContainerAllocator>
struct DataType< ::SubImageRecognition::ListAlgorithmsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "SubImageRecognition/ListAlgorithmsResponse";
  }

  static const char* value(const  ::SubImageRecognition::ListAlgorithmsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::SubImageRecognition::ListAlgorithmsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string[] algorithms\n\
\n\
\n\
";
  }

  static const char* value(const  ::SubImageRecognition::ListAlgorithmsResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::SubImageRecognition::ListAlgorithmsRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ListAlgorithmsRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::SubImageRecognition::ListAlgorithmsResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.algorithms);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ListAlgorithmsResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<SubImageRecognition::ListAlgorithms> {
  static const char* value() 
  {
    return "5c271c164803b5cf2105bc913a23f17a";
  }

  static const char* value(const SubImageRecognition::ListAlgorithms&) { return value(); } 
};

template<>
struct DataType<SubImageRecognition::ListAlgorithms> {
  static const char* value() 
  {
    return "SubImageRecognition/ListAlgorithms";
  }

  static const char* value(const SubImageRecognition::ListAlgorithms&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<SubImageRecognition::ListAlgorithmsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5c271c164803b5cf2105bc913a23f17a";
  }

  static const char* value(const SubImageRecognition::ListAlgorithmsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<SubImageRecognition::ListAlgorithmsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "SubImageRecognition/ListAlgorithms";
  }

  static const char* value(const SubImageRecognition::ListAlgorithmsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<SubImageRecognition::ListAlgorithmsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5c271c164803b5cf2105bc913a23f17a";
  }

  static const char* value(const SubImageRecognition::ListAlgorithmsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<SubImageRecognition::ListAlgorithmsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "SubImageRecognition/ListAlgorithms";
  }

  static const char* value(const SubImageRecognition::ListAlgorithmsResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // SUBIMAGERECOGNITION_SERVICE_LISTALGORITHMS_H

