/* Auto-generated by genmsg_cpp for file /opt/robosub/rosWorkspace/SubImageRecognition/msg/ImgRecObject.msg */
#ifndef SUBIMAGERECOGNITION_MESSAGE_IMGRECOBJECT_H
#define SUBIMAGERECOGNITION_MESSAGE_IMGRECOBJECT_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"


namespace SubImageRecognition
{
template <class ContainerAllocator>
struct ImgRecObject_ : public ros::Message
{
  typedef ImgRecObject_<ContainerAllocator> Type;

  ImgRecObject_()
  : stamp()
  , name()
  , center_x(0)
  , center_y(0)
  , rotation(0.0)
  , height(0)
  , width(0)
  , confidence(0.0)
  {
  }

  ImgRecObject_(const ContainerAllocator& _alloc)
  : stamp()
  , name(_alloc)
  , center_x(0)
  , center_y(0)
  , rotation(0.0)
  , height(0)
  , width(0)
  , confidence(0.0)
  {
  }

  typedef ros::Time _stamp_type;
  ros::Time stamp;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  name;

  typedef uint16_t _center_x_type;
  uint16_t center_x;

  typedef uint16_t _center_y_type;
  uint16_t center_y;

  typedef float _rotation_type;
  float rotation;

  typedef uint16_t _height_type;
  uint16_t height;

  typedef uint16_t _width_type;
  uint16_t width;

  typedef float _confidence_type;
  float confidence;


private:
  static const char* __s_getDataType_() { return "SubImageRecognition/ImgRecObject"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "e457d95566509e9119cff64bd5619f85"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "time stamp\n\
string name\n\
uint16 center_x\n\
uint16 center_y\n\
float32 rotation\n\
uint16 height\n\
uint16 width\n\
float32 confidence\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, stamp);
    ros::serialization::serialize(stream, name);
    ros::serialization::serialize(stream, center_x);
    ros::serialization::serialize(stream, center_y);
    ros::serialization::serialize(stream, rotation);
    ros::serialization::serialize(stream, height);
    ros::serialization::serialize(stream, width);
    ros::serialization::serialize(stream, confidence);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, stamp);
    ros::serialization::deserialize(stream, name);
    ros::serialization::deserialize(stream, center_x);
    ros::serialization::deserialize(stream, center_y);
    ros::serialization::deserialize(stream, rotation);
    ros::serialization::deserialize(stream, height);
    ros::serialization::deserialize(stream, width);
    ros::serialization::deserialize(stream, confidence);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(stamp);
    size += ros::serialization::serializationLength(name);
    size += ros::serialization::serializationLength(center_x);
    size += ros::serialization::serializationLength(center_y);
    size += ros::serialization::serializationLength(rotation);
    size += ros::serialization::serializationLength(height);
    size += ros::serialization::serializationLength(width);
    size += ros::serialization::serializationLength(confidence);
    return size;
  }

  typedef boost::shared_ptr< ::SubImageRecognition::ImgRecObject_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::SubImageRecognition::ImgRecObject_<ContainerAllocator>  const> ConstPtr;
}; // struct ImgRecObject
typedef  ::SubImageRecognition::ImgRecObject_<std::allocator<void> > ImgRecObject;

typedef boost::shared_ptr< ::SubImageRecognition::ImgRecObject> ImgRecObjectPtr;
typedef boost::shared_ptr< ::SubImageRecognition::ImgRecObject const> ImgRecObjectConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::SubImageRecognition::ImgRecObject_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::SubImageRecognition::ImgRecObject_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace SubImageRecognition

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::SubImageRecognition::ImgRecObject_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e457d95566509e9119cff64bd5619f85";
  }

  static const char* value(const  ::SubImageRecognition::ImgRecObject_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe457d95566509e91ULL;
  static const uint64_t static_value2 = 0x19cff64bd5619f85ULL;
};

template<class ContainerAllocator>
struct DataType< ::SubImageRecognition::ImgRecObject_<ContainerAllocator> > {
  static const char* value() 
  {
    return "SubImageRecognition/ImgRecObject";
  }

  static const char* value(const  ::SubImageRecognition::ImgRecObject_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::SubImageRecognition::ImgRecObject_<ContainerAllocator> > {
  static const char* value() 
  {
    return "time stamp\n\
string name\n\
uint16 center_x\n\
uint16 center_y\n\
float32 rotation\n\
uint16 height\n\
uint16 width\n\
float32 confidence\n\
\n\
";
  }

  static const char* value(const  ::SubImageRecognition::ImgRecObject_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::SubImageRecognition::ImgRecObject_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.stamp);
    stream.next(m.name);
    stream.next(m.center_x);
    stream.next(m.center_y);
    stream.next(m.rotation);
    stream.next(m.height);
    stream.next(m.width);
    stream.next(m.confidence);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ImgRecObject_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::SubImageRecognition::ImgRecObject_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::SubImageRecognition::ImgRecObject_<ContainerAllocator> & v) 
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "center_x: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.center_x);
    s << indent << "center_y: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.center_y);
    s << indent << "rotation: ";
    Printer<float>::stream(s, indent + "  ", v.rotation);
    s << indent << "height: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.height);
    s << indent << "width: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.width);
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SUBIMAGERECOGNITION_MESSAGE_IMGRECOBJECT_H

