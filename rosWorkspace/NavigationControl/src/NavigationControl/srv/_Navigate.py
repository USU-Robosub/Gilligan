"""autogenerated by genmsg_py from NavigateRequest.msg. Do not edit."""
import roslib.message
import struct


class NavigateRequest(roslib.message.Message):
  _md5sum = "e21d3132f2554653d6ebf201738a4ca5"
  _type = "NavigationControl/NavigateRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int8 camera_direction
int16 desired_x
int16 desired_y
float32 desired_rotation

"""
  __slots__ = ['camera_direction','desired_x','desired_y','desired_rotation']
  _slot_types = ['int8','int16','int16','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       camera_direction,desired_x,desired_y,desired_rotation
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(NavigateRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.camera_direction is None:
        self.camera_direction = 0
      if self.desired_x is None:
        self.desired_x = 0
      if self.desired_y is None:
        self.desired_y = 0
      if self.desired_rotation is None:
        self.desired_rotation = 0.
    else:
      self.camera_direction = 0
      self.desired_x = 0
      self.desired_y = 0
      self.desired_rotation = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_b2hf.pack(_x.camera_direction, _x.desired_x, _x.desired_y, _x.desired_rotation))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.camera_direction, _x.desired_x, _x.desired_y, _x.desired_rotation,) = _struct_b2hf.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_b2hf.pack(_x.camera_direction, _x.desired_x, _x.desired_y, _x.desired_rotation))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.camera_direction, _x.desired_x, _x.desired_y, _x.desired_rotation,) = _struct_b2hf.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_b2hf = struct.Struct("<b2hf")
"""autogenerated by genmsg_py from NavigateResponse.msg. Do not edit."""
import roslib.message
import struct


class NavigateResponse(roslib.message.Message):
  _md5sum = "4414c67819626a1b8e0f043a9a0d6c9a"
  _type = "NavigationControl/NavigateResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int8 result


"""
  __slots__ = ['result']
  _slot_types = ['int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       result
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(NavigateResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.result is None:
        self.result = 0
    else:
      self.result = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      buff.write(_struct_b.pack(self.result))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 1
      (self.result,) = _struct_b.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      buff.write(_struct_b.pack(self.result))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.result,) = _struct_b.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_b = struct.Struct("<b")
class Navigate(roslib.message.ServiceDefinition):
  _type          = 'NavigationControl/Navigate'
  _md5sum = '256da788932aac90025db21f7d359b9e'
  _request_class  = NavigateRequest
  _response_class = NavigateResponse
