/* Auto-generated by genmsg_cpp for file /home/bryhansen/ros_workspace/robosub/SubConsole/msg/imuMsg.msg */
#ifndef SUBCONSOLE_MESSAGE_IMUMSG_H
#define SUBCONSOLE_MESSAGE_IMUMSG_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"


namespace Ui
{
template <class ContainerAllocator>
struct imuMsg_ : public ros::Message
{
  typedef imuMsg_<ContainerAllocator> Type;

  imuMsg_()
  : yaw(0.0)
  , pitch(0.0)
  , roll(0.0)
  {
  }

  imuMsg_(const ContainerAllocator& _alloc)
  : yaw(0.0)
  , pitch(0.0)
  , roll(0.0)
  {
  }

  typedef float _yaw_type;
  float yaw;

  typedef float _pitch_type;
  float pitch;

  typedef float _roll_type;
  float roll;


private:
  static const char* __s_getDataType_() { return "SubConsole/imuMsg"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "5b83d17121a77a6856144c74d9af68ba"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float32 yaw\n\
float32 pitch\n\
float32 roll\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, yaw);
    ros::serialization::serialize(stream, pitch);
    ros::serialization::serialize(stream, roll);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, yaw);
    ros::serialization::deserialize(stream, pitch);
    ros::serialization::deserialize(stream, roll);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(yaw);
    size += ros::serialization::serializationLength(pitch);
    size += ros::serialization::serializationLength(roll);
    return size;
  }

  typedef boost::shared_ptr< ::Ui::imuMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Ui::imuMsg_<ContainerAllocator>  const> ConstPtr;
}; // struct imuMsg
typedef  ::Ui::imuMsg_<std::allocator<void> > imuMsg;

typedef boost::shared_ptr< ::Ui::imuMsg> imuMsgPtr;
typedef boost::shared_ptr< ::Ui::imuMsg const> imuMsgConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::Ui::imuMsg_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::Ui::imuMsg_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace Ui

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::Ui::imuMsg_<ContainerAllocator> > {
  static const char* value()
  {
    return "5b83d17121a77a6856144c74d9af68ba";
  }

  static const char* value(const  ::Ui::imuMsg_<ContainerAllocator> &) { return value(); }
  static const uint64_t static_value1 = 0x5b83d17121a77a68ULL;
  static const uint64_t static_value2 = 0x56144c74d9af68baULL;
};

template<class ContainerAllocator>
struct DataType< ::Ui::imuMsg_<ContainerAllocator> > {
  static const char* value()
  {
    return "SubConsole/imuMsg";
  }

  static const char* value(const  ::Ui::imuMsg_<ContainerAllocator> &) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::Ui::imuMsg_<ContainerAllocator> > {
  static const char* value()
  {
    return "float32 yaw\n\
float32 pitch\n\
float32 roll\n\
\n\
";
  }

  static const char* value(const  ::Ui::imuMsg_<ContainerAllocator> &) { return value(); }
};

template<class ContainerAllocator> struct IsFixedSize< ::Ui::imuMsg_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Ui::imuMsg_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.yaw);
    stream.next(m.pitch);
    stream.next(m.roll);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct imuMsg_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Ui::imuMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::Ui::imuMsg_<ContainerAllocator> & v)
  {
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SUBCONSOLE_MESSAGE_IMUMSG_H

