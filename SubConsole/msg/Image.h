/* Auto-generated by genmsg_cpp for file /home/bryhansen/ros_workspace/robosub/Ui/msg/Image.msg */
#ifndef SUBCONSOLE_MESSAGE_IMAGE_H
#define SUBCONSOLE_MESSAGE_IMAGE_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "std_msgs/Header.h"

namespace Ui
{
template <class ContainerAllocator>
struct Image_ : public ros::Message
{
  typedef Image_<ContainerAllocator> Type;

  Image_()
  : header()
  , height(0)
  , width(0)
  , encoding()
  , is_bigendian(0)
  , step(0)
  , data()
  {
  }

  Image_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , height(0)
  , width(0)
  , encoding(_alloc)
  , is_bigendian(0)
  , step(0)
  , data(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef uint32_t _height_type;
  uint32_t height;

  typedef uint32_t _width_type;
  uint32_t width;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _encoding_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  encoding;

  typedef uint8_t _is_bigendian_type;
  uint8_t is_bigendian;

  typedef uint32_t _step_type;
  uint32_t step;

  typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _data_type;
  std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  data;


  ROS_DEPRECATED uint32_t get_data_size() const { return (uint32_t)data.size(); }
  ROS_DEPRECATED void set_data_size(uint32_t size) { data.resize((size_t)size); }
  ROS_DEPRECATED void get_data_vec(std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other > & vec) const { vec = this->data; }
  ROS_DEPRECATED void set_data_vec(const std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other > & vec) { this->data = vec; }
private:
  static const char* __s_getDataType_() { return "Ui/Image"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "060021388200f6f0f447d0fcd9c64743"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# This message contains an uncompressed image\n\
# (0, 0) is at top-left corner of image\n\
#\n\
\n\
Header header        # Header timestamp should be acquisition time of image\n\
                     # Header frame_id should be optical frame of camera\n\
                     # origin of frame should be optical center of cameara\n\
                     # +x should point to the right in the image\n\
                     # +y should point down in the image\n\
                     # +z should point into to plane of the image\n\
                     # If the frame_id here and the frame_id of the CameraInfo\n\
                     # message associated with the image conflict\n\
                     # the behavior is undefined\n\
\n\
uint32 height         # image height, that is, number of rows\n\
uint32 width          # image width, that is, number of columns\n\
\n\
# The legal values for encoding are in file src/image_encodings.cpp\n\
# If you want to standardize a new string format, join\n\
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n\
\n\
string encoding       # Encoding of pixels -- channel meaning, ordering, size\n\
                      # taken from the list of strings in src/image_encodings.cpp\n\
\n\
uint8 is_bigendian    # is this data bigendian?\n\
uint32 step           # Full row length in bytes\n\
uint8[] data          # actual matrix data, size is (step * rows)\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, header);
    ros::serialization::serialize(stream, height);
    ros::serialization::serialize(stream, width);
    ros::serialization::serialize(stream, encoding);
    ros::serialization::serialize(stream, is_bigendian);
    ros::serialization::serialize(stream, step);
    ros::serialization::serialize(stream, data);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, header);
    ros::serialization::deserialize(stream, height);
    ros::serialization::deserialize(stream, width);
    ros::serialization::deserialize(stream, encoding);
    ros::serialization::deserialize(stream, is_bigendian);
    ros::serialization::deserialize(stream, step);
    ros::serialization::deserialize(stream, data);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(header);
    size += ros::serialization::serializationLength(height);
    size += ros::serialization::serializationLength(width);
    size += ros::serialization::serializationLength(encoding);
    size += ros::serialization::serializationLength(is_bigendian);
    size += ros::serialization::serializationLength(step);
    size += ros::serialization::serializationLength(data);
    return size;
  }

  typedef boost::shared_ptr< ::Ui::Image_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Ui::Image_<ContainerAllocator>  const> ConstPtr;
}; // struct Image
typedef  ::Ui::Image_<std::allocator<void> > Image;

typedef boost::shared_ptr< ::Ui::Image> ImagePtr;
typedef boost::shared_ptr< ::Ui::Image const> ImageConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::Ui::Image_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::Ui::Image_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace Ui

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::Ui::Image_<ContainerAllocator> > {
  static const char* value()
  {
    return "060021388200f6f0f447d0fcd9c64743";
  }

  static const char* value(const  ::Ui::Image_<ContainerAllocator> &) { return value(); }
  static const uint64_t static_value1 = 0x060021388200f6f0ULL;
  static const uint64_t static_value2 = 0xf447d0fcd9c64743ULL;
};

template<class ContainerAllocator>
struct DataType< ::Ui::Image_<ContainerAllocator> > {
  static const char* value()
  {
    return "Ui/Image";
  }

  static const char* value(const  ::Ui::Image_<ContainerAllocator> &) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::Ui::Image_<ContainerAllocator> > {
  static const char* value()
  {
    return "# This message contains an uncompressed image\n\
# (0, 0) is at top-left corner of image\n\
#\n\
\n\
Header header        # Header timestamp should be acquisition time of image\n\
                     # Header frame_id should be optical frame of camera\n\
                     # origin of frame should be optical center of cameara\n\
                     # +x should point to the right in the image\n\
                     # +y should point down in the image\n\
                     # +z should point into to plane of the image\n\
                     # If the frame_id here and the frame_id of the CameraInfo\n\
                     # message associated with the image conflict\n\
                     # the behavior is undefined\n\
\n\
uint32 height         # image height, that is, number of rows\n\
uint32 width          # image width, that is, number of columns\n\
\n\
# The legal values for encoding are in file src/image_encodings.cpp\n\
# If you want to standardize a new string format, join\n\
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n\
\n\
string encoding       # Encoding of pixels -- channel meaning, ordering, size\n\
                      # taken from the list of strings in src/image_encodings.cpp\n\
\n\
uint8 is_bigendian    # is this data bigendian?\n\
uint32 step           # Full row length in bytes\n\
uint8[] data          # actual matrix data, size is (step * rows)\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::Ui::Image_<ContainerAllocator> &) { return value(); }
};

template<class ContainerAllocator> struct HasHeader< ::Ui::Image_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::Ui::Image_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Ui::Image_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.height);
    stream.next(m.width);
    stream.next(m.encoding);
    stream.next(m.is_bigendian);
    stream.next(m.step);
    stream.next(m.data);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Image_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Ui::Image_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::Ui::Image_<ContainerAllocator> & v)
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "height: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.height);
    s << indent << "width: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.width);
    s << indent << "encoding: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.encoding);
    s << indent << "is_bigendian: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_bigendian);
    s << indent << "step: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.step);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // SUBCONSOLE_MESSAGE_IMAGE_H

