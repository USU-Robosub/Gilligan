/* Auto-generated by genmsg_cpp for file /home/bryhansen/ros_workspace/robosub/SubConsole/msg/motorMsg.msg */
#ifndef SUBCONSOLE_MESSAGE_MOTORMSG_H
#define SUBCONSOLE_MESSAGE_MOTORMSG_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"


namespace Ui
{
template <class ContainerAllocator>
struct motorMsg_ : public ros::Message
{
  typedef motorMsg_<ContainerAllocator> Type;

  motorMsg_()
  : motorMask(0)
  , speed(0)
  {
  }

  motorMsg_(const ContainerAllocator& _alloc)
  : motorMask(0)
  , speed(0)
  {
  }

  typedef int8_t _motorMask_type;
  int8_t motorMask;

  typedef int8_t _speed_type;
  int8_t speed;


private:
  static const char* __s_getDataType_() { return "Ui/motorMsg"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "7529fc2acb79e48556ea73f0bc79e3ac"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "byte motorMask\n\
byte speed\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, motorMask);
    ros::serialization::serialize(stream, speed);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, motorMask);
    ros::serialization::deserialize(stream, speed);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(motorMask);
    size += ros::serialization::serializationLength(speed);
    return size;
  }

  typedef boost::shared_ptr< ::Ui::motorMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Ui::motorMsg_<ContainerAllocator>  const> ConstPtr;
}; // struct motorMsg
typedef  ::Ui::motorMsg_<std::allocator<void> > motorMsg;

typedef boost::shared_ptr< ::Ui::motorMsg> motorMsgPtr;
typedef boost::shared_ptr< ::Ui::motorMsg const> motorMsgConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::Ui::motorMsg_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::Ui::motorMsg_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace Ui

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::Ui::motorMsg_<ContainerAllocator> > {
  static const char* value()
  {
    return "7529fc2acb79e48556ea73f0bc79e3ac";
  }

  static const char* value(const  ::Ui::motorMsg_<ContainerAllocator> &) { return value(); }
  static const uint64_t static_value1 = 0x7529fc2acb79e485ULL;
  static const uint64_t static_value2 = 0x56ea73f0bc79e3acULL;
};

template<class ContainerAllocator>
struct DataType< ::Ui::motorMsg_<ContainerAllocator> > {
  static const char* value()
  {
    return "Ui/motorMsg";
  }

  static const char* value(const  ::Ui::motorMsg_<ContainerAllocator> &) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::Ui::motorMsg_<ContainerAllocator> > {
  static const char* value()
  {
    return "byte motorMask\n\
byte speed\n\
\n\
\n\
";
  }

  static const char* value(const  ::Ui::motorMsg_<ContainerAllocator> &) { return value(); }
};

template<class ContainerAllocator> struct IsFixedSize< ::Ui::motorMsg_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Ui::motorMsg_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.motorMask);
    stream.next(m.speed);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct motorMsg_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Ui::motorMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::Ui::motorMsg_<ContainerAllocator> & v)
  {
    s << indent << "motorMask: ";
    Printer<int8_t>::stream(s, indent + "  ", v.motorMask);
    s << indent << "speed: ";
    Printer<int8_t>::stream(s, indent + "  ", v.speed);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SUBCONSOLE_MESSAGE_MOTORMSG_H

